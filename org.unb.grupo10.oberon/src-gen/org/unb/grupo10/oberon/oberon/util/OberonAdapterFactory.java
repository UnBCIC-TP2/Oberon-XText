/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.unb.grupo10.oberon.oberon.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.unb.grupo10.oberon.oberon.Arguments;
import org.unb.grupo10.oberon.oberon.Block;
import org.unb.grupo10.oberon.oberon.Constant;
import org.unb.grupo10.oberon.oberon.Declararion;
import org.unb.grupo10.oberon.oberon.Declarations;
import org.unb.grupo10.oberon.oberon.Designator;
import org.unb.grupo10.oberon.oberon.Expression;
import org.unb.grupo10.oberon.oberon.FormalArg;
import org.unb.grupo10.oberon.oberon.Formals;
import org.unb.grupo10.oberon.oberon.Oberon;
import org.unb.grupo10.oberon.oberon.OberonPackage;
import org.unb.grupo10.oberon.oberon.OberonType;
import org.unb.grupo10.oberon.oberon.Operation;
import org.unb.grupo10.oberon.oberon.Procedure;
import org.unb.grupo10.oberon.oberon.Statement;
import org.unb.grupo10.oberon.oberon.UserTypeDeclaration;
import org.unb.grupo10.oberon.oberon.VarDeclaration;
import org.unb.grupo10.oberon.oberon.caseAlternative;
import org.unb.grupo10.oberon.oberon.elseIfStmt;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.unb.grupo10.oberon.oberon.OberonPackage
 * @generated
 */
public class OberonAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OberonPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OberonAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OberonPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OberonSwitch<Adapter> modelSwitch =
    new OberonSwitch<Adapter>()
    {
      @Override
      public Adapter caseOberon(Oberon object)
      {
        return createOberonAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseDeclarations(Declarations object)
      {
        return createDeclarationsAdapter();
      }
      @Override
      public Adapter caseUserTypeDeclaration(UserTypeDeclaration object)
      {
        return createUserTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseConstant(Constant object)
      {
        return createConstantAdapter();
      }
      @Override
      public Adapter caseVarDeclaration(VarDeclaration object)
      {
        return createVarDeclarationAdapter();
      }
      @Override
      public Adapter caseProcedure(Procedure object)
      {
        return createProcedureAdapter();
      }
      @Override
      public Adapter caseFormals(Formals object)
      {
        return createFormalsAdapter();
      }
      @Override
      public Adapter caseFormalArg(FormalArg object)
      {
        return createFormalArgAdapter();
      }
      @Override
      public Adapter caseArguments(Arguments object)
      {
        return createArgumentsAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseDesignator(Designator object)
      {
        return createDesignatorAdapter();
      }
      @Override
      public Adapter casecaseAlternative(caseAlternative object)
      {
        return createcaseAlternativeAdapter();
      }
      @Override
      public Adapter caseelseIfStmt(elseIfStmt object)
      {
        return createelseIfStmtAdapter();
      }
      @Override
      public Adapter caseOberonType(OberonType object)
      {
        return createOberonTypeAdapter();
      }
      @Override
      public Adapter caseDeclararion(Declararion object)
      {
        return createDeclararionAdapter();
      }
      @Override
      public Adapter caseInteger(org.unb.grupo10.oberon.oberon.Integer object)
      {
        return createIntegerAdapter();
      }
      @Override
      public Adapter caseBoolean(org.unb.grupo10.oberon.oberon.Boolean object)
      {
        return createBooleanAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Oberon <em>Oberon</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Oberon
   * @generated
   */
  public Adapter createOberonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Declarations <em>Declarations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Declarations
   * @generated
   */
  public Adapter createDeclarationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.UserTypeDeclaration <em>User Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.UserTypeDeclaration
   * @generated
   */
  public Adapter createUserTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Constant
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.VarDeclaration <em>Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.VarDeclaration
   * @generated
   */
  public Adapter createVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Procedure <em>Procedure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Procedure
   * @generated
   */
  public Adapter createProcedureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Formals <em>Formals</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Formals
   * @generated
   */
  public Adapter createFormalsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.FormalArg <em>Formal Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.FormalArg
   * @generated
   */
  public Adapter createFormalArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Arguments <em>Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Arguments
   * @generated
   */
  public Adapter createArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Designator <em>Designator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Designator
   * @generated
   */
  public Adapter createDesignatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.caseAlternative <em>case Alternative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.caseAlternative
   * @generated
   */
  public Adapter createcaseAlternativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.elseIfStmt <em>else If Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.elseIfStmt
   * @generated
   */
  public Adapter createelseIfStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.OberonType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.OberonType
   * @generated
   */
  public Adapter createOberonTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Declararion <em>Declararion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Declararion
   * @generated
   */
  public Adapter createDeclararionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Integer <em>Integer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Integer
   * @generated
   */
  public Adapter createIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unb.grupo10.oberon.oberon.Boolean <em>Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unb.grupo10.oberon.oberon.Boolean
   * @generated
   */
  public Adapter createBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OberonAdapterFactory
