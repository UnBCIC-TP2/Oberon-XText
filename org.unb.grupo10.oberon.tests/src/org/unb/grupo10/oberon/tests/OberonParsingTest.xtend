/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.unb.grupo10.oberon.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.unb.grupo10.oberon.oberon.Oberon
import java.nio.file.Files
import java.nio.file.Path

@ExtendWith(InjectionExtension)
@InjectWith(OberonInjectorProvider)
class OberonParsingTest {
	@Inject
	ParseHelper<Oberon> parseHelper
	
	@Test
	def void teste1() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/teste1.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void arrayIndex01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/arrayIndex01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void arrayIndex02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/arrayIndex02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void arrayIndex03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/arrayIndex03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple06() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple06.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple07() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple07.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple08() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple08.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple09() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple09.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void simple10() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/simple10.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void userTypeSimple01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/userTypeSimple01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void userTypeSimple02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/userTypeSimple02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void userTypeSimple03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/userTypeSimple03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void userTypeSimple04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/userTypeSimple04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void userTypeSimple05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/userTypeSimple05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void userTypeSimple06() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/userTypeSimple06.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void userTypeSimple07() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/userTypeSimple07.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ArrayAssignmentStmt01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ArrayAssignmentStmt01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ArrayAssignmentStmt02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ArrayAssignmentStmt02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ArrayAssignmentStmt03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ArrayAssignmentStmt03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ArrayAssignmentStmt04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ArrayAssignmentStmt04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ArrayAssignmentStmt05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ArrayAssignmentStmt05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ExpressionNameParser1() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ExpressionNameParser1.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ExpressionNameParser2() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ExpressionNameParser2.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ExpressionNameParser3() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ExpressionNameParser3.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ExpressionNameParser4() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ExpressionNameParser4.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ExpressionNameParser5() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ExpressionNameParser5.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ifelseif_stmt31() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ifelseif_stmt31.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ifelseif_stmt32() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ifelseif_stmt32.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ifelseif_stmt33() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/ifelseif_stmt33.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt06() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt06.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt07() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt07.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt08() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt08.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt09() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt09.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void IfElseIfStmt10() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/IfElseIfStmt10.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt06() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt06.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt07() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt07.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt08() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt08.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt09() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt09.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_stmt10() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_stmt10.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loop_stmt01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/loop_stmt01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loop_stmt02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/loop_stmt02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loop_stmt03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/loop_stmt03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void recordAssignmentStmt01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/recordAssignmentStmt01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void recordAssignmentStmt02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/recordAssignmentStmt02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void recordAssignmentStmt03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/recordAssignmentStmt03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void recordAssignmentStmt04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/recordAssignmentStmt04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void recordAssignmentStmt05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/recordAssignmentStmt05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void repeatuntil() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/repeatuntil.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void repeatuntil01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/repeatuntil01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void repeatuntil02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/repeatuntil02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void repeatuntil03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/repeatuntil03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void repeatuntil04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/repeatuntil04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt06() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt06.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt07() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt07.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void RepeatUntilStmt08() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/RepeatUntilStmt08.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt05() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt05.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt06() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt06.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt07() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt07.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt08() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt08.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt09() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt09.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt10() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt10.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt11() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt11.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt12() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt12.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt13() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt13.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt14() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt14.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt15() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt15.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt16() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt16.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt17() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt17.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt18() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt18.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt19() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt19.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt20() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt20.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt21() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt21.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt22() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt22.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt23() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt23.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt24() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt24.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt25() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt25.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt26() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt26.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt27() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt27.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt28() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt28.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt29() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt29.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt30() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt30.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt31() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt31.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt32() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt32.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt33() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt33.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt34() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt34.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt35() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt35.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt36() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt36.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void stmt37() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/stmt37.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_factorial01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_factorial01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_factorial02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_factorial02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_factorial03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_factorial03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_factorial04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_factorial04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_fibonacci01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_fibonacci01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void interpreter_fibonacci02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/interpreter_fibonacci02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void procedure01() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/procedure01.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void procedure02() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/procedure02.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void procedure03() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/procedure03.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void procedure04() {
		val result = parseHelper.parse(Files.readString(Path.of("testes/procedure04.oberon")))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}

